summarize(cran, avg_bytes = mean(size))
bye()
quit
quit()
library(swirl)
rm(list=ls())
ls()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran)
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size)
)
?n
?n_distinct
submit()
submit()
?n
?n_distinct
submit()
submit()
submit()
pack_sum
submit()
pack_sum
reset()
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arranage(desc(top_counts))
top_counts_sorted <- arrange(desc(top_counts))
?arrange
top_counts_sorted <- arranage(pack_sum, desc(top_counts))
top_counts_sorted <- arrange(pack_sum, desc(top_counts))
top_counts_sorted <- arrange(top_counts, desc(top_counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit
submit()
submit()
View(result3)
cran %>%
select() %>%
print
submit()
submit()
?chain
chain(cran, p_id, country, package, size)
chain(cran)
submit()
submit()
chain()
chain(cran %>%, select() %>%)
chain (cran %>%, select() %>%)
reset()
swirl()
?chain
submit()
submit()
submit()
submit()
submit()
submit()
submit()
quit()
install.packages(RMySQL)
install.packages(MySQL)
install.packages(M)
install.packages("RMySQL")
library(RMySQL)
2
1
library(DBI)
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user = "genome"
host="genome-mysql.cse.ucsc.edu")
host ="genome-mysql.cse.ucsc.edu")
q()
library(DBI)
library(RMySQL0
0
)
library(RMySQL)
library(DBI)
UCSCdb <- dbConnect(MySQL(), user = "genome"
host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = "genome"
host = "genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user = "genome",
host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user= "genome", db="hg19",
host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
q()
library(httr)
installed.packages("httr")
installed.packages("httr")
q()
library(httr)
install.packages(httr)
install.packages("httr")
install.packages("httr")
library(httr)
q()
library(sqldf)
install.packages("sqldf")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
library(sqldf)
q()
library(swirl)
rm(list=ls())
swirl()
swirl()
swirl()
swirl()
5=7
5+7
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
https://github.com/swirldev/swirl_courses/tree/master/Getting_and_Cleaning_Data
fileurl = 'https://github.com/swirldev/swirl_courses/tree/master/Getting_and_Cleaning_Data"
fileurl = 'https://github.com/swirldev/swirl_courses/tree/master/Getting_and_Cleaning_Data'
swirl()
qiut()
quit()
library(swirl)
swirl()
library(dplyr)
cran
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran)
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size)
=)
"summarise(by_package, mean(size) ="
summarise(by_package, mean(size))
swirl()
submit()
reset()
submit()
summarize(by_package, mean(size))
script_results_identical('pack_sum')
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries), avg_bytes)
print(result1)
submit()
?info()
info()
main()
pack_sum
any_of_exprs('pack_sum', 'print(pack_sum)')
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
script_vals_identical()
"Would you like to receive credit for completing this course on
Coursera.org?"
"
)
)
quit()
exit()
yes
q()
info()
)))))
skip()
Q()
swirl()
library(swirl)
rm(list=ls())
swirl()
submit()
submit()
library(dplyr)
summarise()
summarize(by_package, mean(size))
library(swirl)
rm(list=ls())
swirl()
swirl()
submit()
reset()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -value)
res <- gather(students2, sex_class, count, -grade)
res
separte(students2, sex_class)
separate(students2, sex_class)
separate(res, sex_class)
separate(res, sex_class, c("sex", "class"))
?separate
data = res, col = sex_class, into = c("sex", "class")
data = (res, col = sex_class, into = c("sex", "class"))
separate(res, col = sex_class, into = c("sex", "class"))
reset()
options(editor = "internal")
reset()
swirl()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(desc(top_counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum$unique > 465)
top_unique <- filter(pack-sum, pack_sum$unique > 465)
top_unique <- filter(pack_sum$unique, count > 465)
top_unique <- filter(pack_sum$unique, c(pack_sum, count > 465))
?filter
top_unique <- filter(pack_sum, count > 465)
filter(pack_sum, unique > 465)
top_count <- filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(top_unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
reset()
swirl()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
quit()
library(swirl)
rm(list=ls())
swirl()
options(editor = "internal")
swirl()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
spread()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
submit()
passed <- passed %>% mutate(status = "passed")
failed
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows("passed", "failed")
bind_rows(list(passed, failed)
)
bind_rows(passed, failed)
sat
submit()
submit()
q()
library(swirl)
rm(list=ls())
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day < - today()
this_day <- today()
this_day
this_day <- year()
this_day(x) <- year()
this_day <- day()
day()
this_day
month(this_day)
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_momnet <- now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd(192012)
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hh:mm:ss(03:22:14)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_momnet <- update(this_moment)
this_moment <- update(this_moment)
update(this_moment)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours = 15 + minutes = 50
arrive <- (depart + hours = 15 , minutes = 50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- with_tz(arrive, "Asia/Hong_Kong" - ""June 17, 2008", tz = "Singapore")
last_time <- with_tz(arrive, "Asia/Hong_Kong" - "June 17, 2008", tz = "Singapore")
last_time <- with_tz("2016-04-22 21:24:27 HKT" - "June 17, 2008", tz = "Singapore")
last_time <- with_tz("2016-04-22 21:24:27 HKT" - "2008-06-17", tz = "Singapore")
last_time <- with_tz("2016-04-22 21:24:27 HKT" - "2008-06-17, tz = Singapore")
last_time <- with_tz("2016-04-22 21:24:27 HKT" - 2008-06-17, tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- arrive - last-time
how_long <- arrive - last_time
how_long <- new_interval(arrive - last_time)
how_long <- new_interval("2016-04-22 21:24:27 HKT" -  "2008-06-17 SGT")
how_long <- interval(last_time, arrive)
new_interval <- interval(last_time, arrive)
as.period(how_long)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
par("mar")
library(swirl)
rm(list=ls())
swirl()
swirl()
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(PM2.5)
head(PM2.5)
head(PM)
head(pm2.5)
library(PM2.5)
library(PM 2.5)
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, color = blue)
boxplot(ppm, color = "blue")
boxplot(ppm,col="blue")
?abline
boxplot(ppm,col="blue"), abline(h = 12)
boxplot((ppm, col="blue"), abline(h = 12))
model <- boxplot((ppm, col="blue")
model <- boxplot(ppm, col="blue")
abline(h = 12)
hist(ppm, col = green)
hist(population, col = green)
hist(ppm)
hist(ppm, col = "green")
?rug
rug(ppm)
low
high
hist(ppm, col = "green", break = 100)
hist(ppm, col = "green", break == 100)
?break
hist(ppm, col = "green", breaks= 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
summary(pollution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(formula y ~ x, pollution, col = "red")
boxplot(formula = y ~ x, data = pollution, col = "red")
boxplot(y ~ x, pollution, col = "red")
boxplot(formula = y ~ x, pollution, col = "red")
boxplot(region ~ pm25, pollution, col = "red")
boxplot(formula = region ~ pm25, data = pollution, col = "red")
boxplot(formula pm25~region, data = pollution, col = "red")
boxplot(formula = pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
?subet
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east, col = "green")
hist(pm25(east), col = "green")
hist(pm25(east), col = "green")
hist(east(pm25), col = "green")
hist(east~pm25, col = "green")
east <- subset(pollution,region=="east")
hist(east$pm25, col = "green")
hist(west$pm25, col = "green")
west <- subset(pollution,region=="west")
hist(subset(pollution,region=="west")$pm25, col = "green")
hist(subset(pollution,region=="latitude")$pm25, col = "green")
plot <- hist(subset(pollution,region=="latitude")$pm25, col = "green")
plot <- hist(subset(pollution,region=="latitude")$pm25, col = "green")
plot <- with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25))
abline(lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25), col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline( h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West" )
plot(east$latitude, east$pm25, main = "East" )
q()
x <-rnorm(100)
hist(x)
y <-rnorm(100)
plot(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x)
character(x)
x[1]
x[[1]]
length(x)
setwd("~/DataScience/ExplotaryData/Data")
